// vite.config.ts
import { resolve } from "path";

// build/plugin/index.ts
import Vue from "@vitejs/plugin-vue";

// build/plugin/dynamicImport.ts
import dynamicImport from "vite-plugin-dynamic-import";
function createDynamicImportPlugin() {
  return dynamicImport.default({ loose: true });
}

// build/plugin/autoImport.ts
import Components from "unplugin-vue-components/vite";
import { AntDesignVueResolver } from "unplugin-vue-components/resolvers";
function createAutoImportPlugin() {
  return Components({
    resolvers: [AntDesignVueResolver()]
  });
}

// build/plugin/mock.ts
import { viteMockServe } from "vite-plugin-mock";
function createMockPlugin(isBuild = false) {
  return viteMockServe({
    ignore: /^\_/,
    mockPath: "mock",
    localEnabled: !isBuild,
    prodEnabled: isBuild,
    injectCode: `import { setupProdMockServer } from '../mock/_createProductionServer';
            setupProdMockServer();`
  });
}

// build/plugin/vueJsx.ts
import vueJsx from "@vitejs/plugin-vue-jsx";
function createVueJsx() {
  return vueJsx({});
}

// build/plugin/typeImport.ts
import VueTypeImports from "vite-plugin-vue-type-imports";
function createTypeImport() {
  return VueTypeImports();
}

// build/plugin/index.ts
function createPlugin() {
  return [
    createDynamicImportPlugin(),
    createAutoImportPlugin(),
    createMockPlugin(),
    createVueJsx(),
    Vue({
      reactivityTransform: true
    }),
    createTypeImport()
  ];
}

// postcss.config.js
import tailwind from "tailwindcss";
import autoprefixer from "autoprefixer";

// tailwind.config.ts
function createSpacing(len = 800, unit = "px") {
  const spacing = { px: `1${unit}`, 0: `0${unit}` };
  for (let i = len; i > 0; i--) {
    if (i % 2 === 0 || i % 5 === 0) {
      Reflect.set(spacing, i, i + unit);
    }
  }
  return spacing;
}
var tailwind_config_default = {
  content: ["./src/**/*.{vue,tsx}"],
  theme: {
    extend: {
      spacing: createSpacing()
    }
  },
  plugins: []
};

// postcss.config.js
var postcss_config_default = {
  plugins: [tailwind(tailwind_config_default), autoprefixer]
};

// vite.config.ts
var pathResolve = (dir) => resolve(process.cwd(), ".", dir);
var resolveConfig = () => {
  return {
    alias: [
      {
        find: /\/@\//,
        replacement: `${pathResolve("src")}/`
      },
      {
        find: /\/#\//,
        replacement: `${pathResolve("types")}/`
      }
    ]
  };
};
var vite_config_default = ({ command, mode }) => {
  return {
    resolve: resolveConfig(),
    plugins: createPlugin(),
    server: {
      host: "0.0.0.0"
    },
    envDir: "env",
    css: {
      postcss: postcss_config_default
    }
  };
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
